REM --------------------------------------------------------------------------------------------------------------------------
REM ========== Guidelines ===============
REM
REM -------------------------------------
REM ---- Common Environment Variable ----
REM -------------------------------------
REM ${Package_Publish} (boolean): Indicates whether it is build package process, e.g. If you want to get one CI SDK package.
REM ${Clean_Clone} (boolean): Indicates whether it is clean build. If true, CI will clean ${output} for each build process.
REM ${is_tag_fetch} (boolean): If true, git checkout will work as tag fetch mode.
REM ${is_official_build} (boolean): Indicates whether it is official build release.
REM ${arch} (string): Indicates build arch set in build pipeline.
REM ${short_version} (string): CI auto generated short version string.
REM ${release_version} (string): CI auto generated version string.
REM ${build_date} (string(yyyyMMdd)): Build date generated by CI.
REM ${build_timestamp} (string (yyyyMMdd_hhmm)): Build timestamp generated by CI.
REM ${platform} (string): Build platform generated by CI.
REM ${BUILD_NUMBER} (string): Build number generated by CI.
REM ${WORKSPACE} (string): Working dir generated by CI.
REM
REM -------------------------------------
REM ------- Job Custom Parameters -------
REM -------------------------------------
REM If you added one custom parameter via rehoboam website, e.g. extra_args.
REM You could use $extra_args to get its value.
REM
REM -------------------------------------
REM ------------- Input -----------------
REM -------------------------------------
REM ${source_root}: Source root which checkout the source code.
REM ${WORKSPACE}: project owned private workspace.
REM
REM -------------------------------------
REM ------------- Output ----------------
REM -------------------------------------
REM Generally, we should put the output files into %WORKSPACE%
REM 1. for pull request: Output files should be zipped to test.zip, and then copy to %WORKSPACE%.
REM 2. for pull request (options): Output static xml should be static_%platform%.xml, and then copy to %WORKSPACE%.
REM 3. for others: Output files should be zipped to anything_you_want.zip, and then copy it to %WORKSPACE%.
REM
REM -------------------------------------
REM --------- Avaliable Tools -----------
REM -------------------------------------
REM Compressing & Decompressing: 7z a, 7z x
REM
REM -------------------------------------
REM ----------- Test Related ------------
REM -------------------------------------
REM PR build, zip test related to test.zip
REM Package build, zip package related to package.zip
REM
REM -------------------------------------
REM ------ Publish to artifactory -------
REM -------------------------------------
REM [Download] artifacts from artifactory:
REM python3 ${WORKSPACE}/artifactory_utils.py --action=download_file --file=ARTIFACTORY_URL
REM
REM [Upload] artifacts to artifactory:
REM python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=FILEPATTERN --project
REM Sample Code:
REM python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=*.zip --project
REM
REM [Upload] artifacts folder to artifactory
REM python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=FILEPATTERN --project --with_folder
REM Sample Code:
REM python3 ${WORKSPACE}/artifactory_utils.py --action=upload_file --file=./folder --project --with_folder
REM
REM ========== Guidelines END==============
REM --------------------------------------------------------------------------------------------------------------------------

echo Package_Publish: %Package_Publish%
echo is_tag_fetch: %is_tag_fetch%
echo arch: %arch%
echo source_root: %source_root%
echo output: C:\\tmp\\%project%_out
echo build_date: %build_date%
echo build_time: %build_time%
echo release_version: %release_version%
echo short_version: %short_version%
echo pwd: %cd%


echo isBuildSdk: %isBuildSdk%
echo isBuildDemo: %isBuildDemo%
echo Upload_CDN: %Upload_CDN%
echo example_electron_version: %example_electron_version%
echo example_sdk_mode: %example_sdk_mode%
echo arch: %arch%
echo package_version: %package_version%

git config --system core.longpaths true
call npm config delete ELECTRON_MIRROR
call npm config delete electron_mirror
call npm config delete artifactory_api_key
call npm config delete ARTIFACTORY_API_KEY

echo npm config list
call npm config list

del /a /f /s *.zip
del /a /f /s Electron-SDK
del /a /f /s example\dist

pushd ..\Electron-SDK

if %isBuildSdk% == true (

  call ci\electron-sdk-build-windows-release.bat %arch%
  echo 执行上传electron.zip到artifactory
  echo path:%WORKSPACE%\\%build_time%_windows_%arch%.zip
  copy electron.zip %WORKSPACE%\%build_time%_windows_%package_version%_%arch%.zip

  if %Upload_CDN% == true (
    @REM  electron.zip
    @REM  执行上传SDK到CDN
    echo 执行上传electron.zip到CDN
  )
)

if %example_sdk_mode% == 1 (
  7z x electron.zip -o.\Electron-SDK\ -y
)

if %isBuildDemo% == true (
  echo isBuildDemo: %isBuildDemo%
  call powershell.exe -executionpolicy remotesigned -File ci\packager-win.ps1 %arch% %example_sdk_mode% %example_electron_version%
  @REM electronDemo.zip
  @REM 执行上传到artifactory
  echo 执行上传electronDemo.zip到artifactory
  copy electronDemo.zip %WORKSPACE%\\%build_time%_windows_electron_demo_%package_version%_%arch%.zip
)

echo 全部完成

popd
